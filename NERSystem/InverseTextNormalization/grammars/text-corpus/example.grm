import 'byte.grm' as bytelib;
import 'numbers.grm' as numbers;


insspace = "" : " ";

reduce_spaces = bytelib.kSpace+ : " ";

delspace = bytelib.kSpace* : "";

sigma_star = bytelib.kBytes*;

punct_not_period = bytelib.kPunct - ".";

separate_punct1 = CDRewrite["" : " ", "", punct_not_period, sigma_star];

separate_punct2 = CDRewrite["" : " ", punct_not_period, "", sigma_star];

separate_punct = separate_punct1 @ separate_punct2;

separate_final_period = CDRewrite["" : " ",
                                  "",
                                  "."
                                  (bytelib.kPunct | bytelib.kSpace)* "[EOS]",
                                  sigma_star]
;


first_phase = Optimize[separate_punct];

anyword = bytelib.kNotSpace+;
number = numbers.NUMBERS;

word = (anyword <1.5>) | number;


second_phase = delspace
               word
               (reduce_spaces word)*
               delspace
;


lower_case = ("A": "a") |
              ("B": "b") |
              ("C": "c") |
              ("D": "d") |
              ("E": "e") |
              ("F": "f") |
              ("G": "g") |
              ("H": "h") |
              ("I": "i") |
              ("K": "k") |
              ("L": "l") |
              ("M": "m") |
              ("N": "n") |
              ("O": "o") |
              ("P": "p") |
              ("Q": "q") |
              ("R": "r") |
              ("S": "s") |
              ("T": "t") |
              ("U": "u") |
              ("V": "v") |
              ("W": "w") |
              ("X": "x") |
              ("Y": "y") |
              ("Z": "z");


make_lower = CDRewrite[lower_case, "", (bytelib.kSpace | bytelib.kNotSpace),
                        sigma_star, 'sim', 'obl'];

# The whole tokenizer is the composition of the three phases. We export this
# rule since we want it available in the final FST archive:

export TOKENIZER = Optimize[first_phase @ second_phase @ make_lower];
